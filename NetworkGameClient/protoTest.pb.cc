// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoTest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protoTest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Player_PlayerState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Leaderboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Leaderboard_reflection_ = NULL;
const ::google::protobuf::Descriptor* Army_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Army_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protoTest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protoTest_2eproto() {
  protobuf_AddDesc_protoTest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protoTest.proto");
  GOOGLE_CHECK(file != NULL);
  Player_descriptor_ = file->message_type(0);
  static const int Player_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, losses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, playerstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, challengeid_),
  };
  Player_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Player_descriptor_,
      Player::internal_default_instance(),
      Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _has_bits_),
      -1,
      -1,
      sizeof(Player),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _internal_metadata_));
  Player_PlayerState_descriptor_ = Player_descriptor_->enum_type(0);
  Leaderboard_descriptor_ = file->message_type(1);
  static const int Leaderboard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, winners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, losers_),
  };
  Leaderboard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Leaderboard_descriptor_,
      Leaderboard::internal_default_instance(),
      Leaderboard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, _has_bits_),
      -1,
      -1,
      sizeof(Leaderboard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, _internal_metadata_));
  Army_descriptor_ = file->message_type(2);
  static const int Army_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Army, archers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Army, swordsman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Army, cavalry_),
  };
  Army_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Army_descriptor_,
      Army::internal_default_instance(),
      Army_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Army, _has_bits_),
      -1,
      -1,
      sizeof(Army),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Army, _internal_metadata_));
  Game_descriptor_ = file->message_type(3);
  static const int Game_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, player1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, player2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, army1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, army2_),
  };
  Game_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Game_descriptor_,
      Game::internal_default_instance(),
      Game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, _has_bits_),
      -1,
      -1,
      sizeof(Game),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protoTest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Player_descriptor_, Player::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Leaderboard_descriptor_, Leaderboard::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Army_descriptor_, Army::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Game_descriptor_, Game::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protoTest_2eproto() {
  Player_default_instance_.Shutdown();
  delete Player_reflection_;
  Leaderboard_default_instance_.Shutdown();
  delete Leaderboard_reflection_;
  Army_default_instance_.Shutdown();
  delete Army_reflection_;
  Game_default_instance_.Shutdown();
  delete Game_reflection_;
}

void protobuf_InitDefaults_protoTest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Player_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Leaderboard_default_instance_.DefaultConstruct();
  Army_default_instance_.DefaultConstruct();
  Game_default_instance_.DefaultConstruct();
  Player_default_instance_.get_mutable()->InitAsDefaultInstance();
  Leaderboard_default_instance_.get_mutable()->InitAsDefaultInstance();
  Army_default_instance_.get_mutable()->InitAsDefaultInstance();
  Game_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_protoTest_2eproto_once_);
void protobuf_InitDefaults_protoTest_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_protoTest_2eproto_once_,
                 &protobuf_InitDefaults_protoTest_2eproto_impl);
}
void protobuf_AddDesc_protoTest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_protoTest_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017protoTest.proto\"\334\001\n\006Player\022\014\n\004name\030\001 \002"
    "(\t\022\020\n\010password\030\002 \002(\t\022\014\n\004wins\030\003 \002(\005\022\016\n\006lo"
    "sses\030\004 \002(\005\022(\n\013playerState\030\005 \002(\0162\023.Player"
    ".PlayerState\022\020\n\010clientId\030\006 \002(\005\022\023\n\013challe"
    "ngeId\030\007 \002(\005\"C\n\013PlayerState\022\t\n\005Lobby\020\000\022\n\n"
    "\006InGame\020\001\022\r\n\tLoggedOut\020\002\022\016\n\nChallenged\020\003"
    "\".\n\013Leaderboard\022\017\n\007winners\030\001 \001(\t\022\016\n\006lose"
    "rs\030\002 \001(\t\";\n\004Army\022\017\n\007archers\030\001 \002(\005\022\021\n\tswo"
    "rdsman\030\002 \002(\005\022\017\n\007cavalry\030\003 \002(\005\"f\n\004Game\022\030\n"
    "\007player1\030\001 \002(\0132\007.Player\022\030\n\007player2\030\002 \002(\013"
    "2\007.Player\022\024\n\005army1\030\003 \002(\0132\005.Army\022\024\n\005army2"
    "\030\004 \002(\0132\005.Army", 453);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protoTest.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protoTest_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_protoTest_2eproto_once_);
void protobuf_AddDesc_protoTest_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_protoTest_2eproto_once_,
                 &protobuf_AddDesc_protoTest_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protoTest_2eproto {
  StaticDescriptorInitializer_protoTest_2eproto() {
    protobuf_AddDesc_protoTest_2eproto();
  }
} static_descriptor_initializer_protoTest_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Player_PlayerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_PlayerState_descriptor_;
}
bool Player_PlayerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Player_PlayerState Player::Lobby;
const Player_PlayerState Player::InGame;
const Player_PlayerState Player::LoggedOut;
const Player_PlayerState Player::Challenged;
const Player_PlayerState Player::PlayerState_MIN;
const Player_PlayerState Player::PlayerState_MAX;
const int Player::PlayerState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player::kNameFieldNumber;
const int Player::kPasswordFieldNumber;
const int Player::kWinsFieldNumber;
const int Player::kLossesFieldNumber;
const int Player::kPlayerStateFieldNumber;
const int Player::kClientIdFieldNumber;
const int Player::kChallengeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player::Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protoTest_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Player)
}

void Player::InitAsDefaultInstance() {
}

Player::Player(const Player& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Player)
}

void Player::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wins_, 0, reinterpret_cast<char*>(&challengeid_) -
    reinterpret_cast<char*>(&wins_) + sizeof(challengeid_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:Player)
  SharedDtor();
}

void Player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_descriptor_;
}

const Player& Player::default_instance() {
  protobuf_InitDefaults_protoTest_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Player> Player_default_instance_;

Player* Player::New(::google::protobuf::Arena* arena) const {
  Player* n = new Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:Player)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Player, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Player*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(wins_, challengeid_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Player.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Player.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wins;
        break;
      }

      // required int32 wins = 3;
      case 3: {
        if (tag == 24) {
         parse_wins:
          set_has_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_losses;
        break;
      }

      // required int32 losses = 4;
      case 4: {
        if (tag == 32) {
         parse_losses:
          set_has_losses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losses_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_playerState;
        break;
      }

      // required .Player.PlayerState playerState = 5;
      case 5: {
        if (tag == 40) {
         parse_playerState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Player_PlayerState_IsValid(value)) {
            set_playerstate(static_cast< ::Player_PlayerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_clientId;
        break;
      }

      // required int32 clientId = 6;
      case 6: {
        if (tag == 48) {
         parse_clientId:
          set_has_clientid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_challengeId;
        break;
      }

      // required int32 challengeId = 7;
      case 7: {
        if (tag == 56) {
         parse_challengeId:
          set_has_challengeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengeid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Player)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Player.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Player.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // required int32 wins = 3;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wins(), output);
  }

  // required int32 losses = 4;
  if (has_losses()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->losses(), output);
  }

  // required .Player.PlayerState playerState = 5;
  if (has_playerstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->playerstate(), output);
  }

  // required int32 clientId = 6;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->clientid(), output);
  }

  // required int32 challengeId = 7;
  if (has_challengeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->challengeid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Player)
}

::google::protobuf::uint8* Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Player)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Player.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Player.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required int32 wins = 3;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wins(), target);
  }

  // required int32 losses = 4;
  if (has_losses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->losses(), target);
  }

  // required .Player.PlayerState playerState = 5;
  if (has_playerstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->playerstate(), target);
  }

  // required int32 clientId = 6;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->clientid(), target);
  }

  // required int32 challengeId = 7;
  if (has_challengeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->challengeid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player)
  return target;
}

size_t Player::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Player)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_password()) {
    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_wins()) {
    // required int32 wins = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wins());
  }

  if (has_losses()) {
    // required int32 losses = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->losses());
  }

  if (has_playerstate()) {
    // required .Player.PlayerState playerState = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerstate());
  }

  if (has_clientid()) {
    // required int32 clientId = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientid());
  }

  if (has_challengeid()) {
    // required int32 challengeId = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->challengeid());
  }

  return total_size;
}
size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required int32 wins = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wins());

    // required int32 losses = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->losses());

    // required .Player.PlayerState playerState = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerstate());

    // required int32 clientId = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientid());

    // required int32 challengeId = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->challengeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Player)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Player)
    UnsafeMergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Player::UnsafeMergeFrom(const Player& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_losses()) {
      set_losses(from.losses());
    }
    if (from.has_playerstate()) {
      set_playerstate(from.playerstate());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_challengeid()) {
      set_challengeid(from.challengeid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Player::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Player::Swap(Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player::InternalSwap(Player* other) {
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  std::swap(wins_, other->wins_);
  std::swap(losses_, other->losses_);
  std::swap(playerstate_, other->playerstate_);
  std::swap(clientid_, other->clientid_);
  std::swap(challengeid_, other->challengeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_descriptor_;
  metadata.reflection = Player_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Player

// required string name = 1;
bool Player::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Player::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:Player.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Player.name)
}
void Player::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Player.name)
}
void Player::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Player.name)
}
::std::string* Player::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:Player.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Player.name)
}

// required string password = 2;
bool Player::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Player::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void Player::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void Player::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& Player::password() const {
  // @@protoc_insertion_point(field_get:Player.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Player.password)
}
void Player::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Player.password)
}
void Player::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Player.password)
}
::std::string* Player::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:Player.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_password() {
  // @@protoc_insertion_point(field_release:Player.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Player.password)
}

// required int32 wins = 3;
bool Player::has_wins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Player::set_has_wins() {
  _has_bits_[0] |= 0x00000004u;
}
void Player::clear_has_wins() {
  _has_bits_[0] &= ~0x00000004u;
}
void Player::clear_wins() {
  wins_ = 0;
  clear_has_wins();
}
::google::protobuf::int32 Player::wins() const {
  // @@protoc_insertion_point(field_get:Player.wins)
  return wins_;
}
void Player::set_wins(::google::protobuf::int32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:Player.wins)
}

// required int32 losses = 4;
bool Player::has_losses() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Player::set_has_losses() {
  _has_bits_[0] |= 0x00000008u;
}
void Player::clear_has_losses() {
  _has_bits_[0] &= ~0x00000008u;
}
void Player::clear_losses() {
  losses_ = 0;
  clear_has_losses();
}
::google::protobuf::int32 Player::losses() const {
  // @@protoc_insertion_point(field_get:Player.losses)
  return losses_;
}
void Player::set_losses(::google::protobuf::int32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:Player.losses)
}

// required .Player.PlayerState playerState = 5;
bool Player::has_playerstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Player::set_has_playerstate() {
  _has_bits_[0] |= 0x00000010u;
}
void Player::clear_has_playerstate() {
  _has_bits_[0] &= ~0x00000010u;
}
void Player::clear_playerstate() {
  playerstate_ = 0;
  clear_has_playerstate();
}
::Player_PlayerState Player::playerstate() const {
  // @@protoc_insertion_point(field_get:Player.playerState)
  return static_cast< ::Player_PlayerState >(playerstate_);
}
void Player::set_playerstate(::Player_PlayerState value) {
  assert(::Player_PlayerState_IsValid(value));
  set_has_playerstate();
  playerstate_ = value;
  // @@protoc_insertion_point(field_set:Player.playerState)
}

// required int32 clientId = 6;
bool Player::has_clientid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Player::set_has_clientid() {
  _has_bits_[0] |= 0x00000020u;
}
void Player::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000020u;
}
void Player::clear_clientid() {
  clientid_ = 0;
  clear_has_clientid();
}
::google::protobuf::int32 Player::clientid() const {
  // @@protoc_insertion_point(field_get:Player.clientId)
  return clientid_;
}
void Player::set_clientid(::google::protobuf::int32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:Player.clientId)
}

// required int32 challengeId = 7;
bool Player::has_challengeid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Player::set_has_challengeid() {
  _has_bits_[0] |= 0x00000040u;
}
void Player::clear_has_challengeid() {
  _has_bits_[0] &= ~0x00000040u;
}
void Player::clear_challengeid() {
  challengeid_ = 0;
  clear_has_challengeid();
}
::google::protobuf::int32 Player::challengeid() const {
  // @@protoc_insertion_point(field_get:Player.challengeId)
  return challengeid_;
}
void Player::set_challengeid(::google::protobuf::int32 value) {
  set_has_challengeid();
  challengeid_ = value;
  // @@protoc_insertion_point(field_set:Player.challengeId)
}

inline const Player* Player::internal_default_instance() {
  return &Player_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leaderboard::kWinnersFieldNumber;
const int Leaderboard::kLosersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leaderboard::Leaderboard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protoTest_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Leaderboard)
}

void Leaderboard::InitAsDefaultInstance() {
}

Leaderboard::Leaderboard(const Leaderboard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Leaderboard)
}

void Leaderboard::SharedCtor() {
  _cached_size_ = 0;
  winners_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  losers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Leaderboard::~Leaderboard() {
  // @@protoc_insertion_point(destructor:Leaderboard)
  SharedDtor();
}

void Leaderboard::SharedDtor() {
  winners_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  losers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Leaderboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leaderboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Leaderboard_descriptor_;
}

const Leaderboard& Leaderboard::default_instance() {
  protobuf_InitDefaults_protoTest_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Leaderboard> Leaderboard_default_instance_;

Leaderboard* Leaderboard::New(::google::protobuf::Arena* arena) const {
  Leaderboard* n = new Leaderboard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Leaderboard::Clear() {
// @@protoc_insertion_point(message_clear_start:Leaderboard)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_winners()) {
      winners_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_losers()) {
      losers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Leaderboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Leaderboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string winners = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winners()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->winners().data(), this->winners().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Leaderboard.winners");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_losers;
        break;
      }

      // optional string losers = 2;
      case 2: {
        if (tag == 18) {
         parse_losers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_losers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->losers().data(), this->losers().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Leaderboard.losers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Leaderboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Leaderboard)
  return false;
#undef DO_
}

void Leaderboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Leaderboard)
  // optional string winners = 1;
  if (has_winners()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winners().data(), this->winners().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Leaderboard.winners");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->winners(), output);
  }

  // optional string losers = 2;
  if (has_losers()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->losers().data(), this->losers().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Leaderboard.losers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->losers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Leaderboard)
}

::google::protobuf::uint8* Leaderboard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Leaderboard)
  // optional string winners = 1;
  if (has_winners()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winners().data(), this->winners().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Leaderboard.winners");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->winners(), target);
  }

  // optional string losers = 2;
  if (has_losers()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->losers().data(), this->losers().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Leaderboard.losers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->losers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Leaderboard)
  return target;
}

size_t Leaderboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Leaderboard)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string winners = 1;
    if (has_winners()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winners());
    }

    // optional string losers = 2;
    if (has_losers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->losers());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leaderboard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Leaderboard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Leaderboard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Leaderboard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Leaderboard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Leaderboard)
    UnsafeMergeFrom(*source);
  }
}

void Leaderboard::MergeFrom(const Leaderboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Leaderboard)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Leaderboard::UnsafeMergeFrom(const Leaderboard& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winners()) {
      set_has_winners();
      winners_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winners_);
    }
    if (from.has_losers()) {
      set_has_losers();
      losers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.losers_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Leaderboard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Leaderboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leaderboard::CopyFrom(const Leaderboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Leaderboard)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Leaderboard::IsInitialized() const {

  return true;
}

void Leaderboard::Swap(Leaderboard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Leaderboard::InternalSwap(Leaderboard* other) {
  winners_.Swap(&other->winners_);
  losers_.Swap(&other->losers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Leaderboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Leaderboard_descriptor_;
  metadata.reflection = Leaderboard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Leaderboard

// optional string winners = 1;
bool Leaderboard::has_winners() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Leaderboard::set_has_winners() {
  _has_bits_[0] |= 0x00000001u;
}
void Leaderboard::clear_has_winners() {
  _has_bits_[0] &= ~0x00000001u;
}
void Leaderboard::clear_winners() {
  winners_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_winners();
}
const ::std::string& Leaderboard::winners() const {
  // @@protoc_insertion_point(field_get:Leaderboard.winners)
  return winners_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Leaderboard::set_winners(const ::std::string& value) {
  set_has_winners();
  winners_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Leaderboard.winners)
}
void Leaderboard::set_winners(const char* value) {
  set_has_winners();
  winners_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Leaderboard.winners)
}
void Leaderboard::set_winners(const char* value, size_t size) {
  set_has_winners();
  winners_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Leaderboard.winners)
}
::std::string* Leaderboard::mutable_winners() {
  set_has_winners();
  // @@protoc_insertion_point(field_mutable:Leaderboard.winners)
  return winners_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Leaderboard::release_winners() {
  // @@protoc_insertion_point(field_release:Leaderboard.winners)
  clear_has_winners();
  return winners_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Leaderboard::set_allocated_winners(::std::string* winners) {
  if (winners != NULL) {
    set_has_winners();
  } else {
    clear_has_winners();
  }
  winners_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winners);
  // @@protoc_insertion_point(field_set_allocated:Leaderboard.winners)
}

// optional string losers = 2;
bool Leaderboard::has_losers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Leaderboard::set_has_losers() {
  _has_bits_[0] |= 0x00000002u;
}
void Leaderboard::clear_has_losers() {
  _has_bits_[0] &= ~0x00000002u;
}
void Leaderboard::clear_losers() {
  losers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_losers();
}
const ::std::string& Leaderboard::losers() const {
  // @@protoc_insertion_point(field_get:Leaderboard.losers)
  return losers_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Leaderboard::set_losers(const ::std::string& value) {
  set_has_losers();
  losers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Leaderboard.losers)
}
void Leaderboard::set_losers(const char* value) {
  set_has_losers();
  losers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Leaderboard.losers)
}
void Leaderboard::set_losers(const char* value, size_t size) {
  set_has_losers();
  losers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Leaderboard.losers)
}
::std::string* Leaderboard::mutable_losers() {
  set_has_losers();
  // @@protoc_insertion_point(field_mutable:Leaderboard.losers)
  return losers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Leaderboard::release_losers() {
  // @@protoc_insertion_point(field_release:Leaderboard.losers)
  clear_has_losers();
  return losers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Leaderboard::set_allocated_losers(::std::string* losers) {
  if (losers != NULL) {
    set_has_losers();
  } else {
    clear_has_losers();
  }
  losers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), losers);
  // @@protoc_insertion_point(field_set_allocated:Leaderboard.losers)
}

inline const Leaderboard* Leaderboard::internal_default_instance() {
  return &Leaderboard_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Army::kArchersFieldNumber;
const int Army::kSwordsmanFieldNumber;
const int Army::kCavalryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Army::Army()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protoTest_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Army)
}

void Army::InitAsDefaultInstance() {
}

Army::Army(const Army& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Army)
}

void Army::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&archers_, 0, reinterpret_cast<char*>(&cavalry_) -
    reinterpret_cast<char*>(&archers_) + sizeof(cavalry_));
}

Army::~Army() {
  // @@protoc_insertion_point(destructor:Army)
  SharedDtor();
}

void Army::SharedDtor() {
}

void Army::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Army::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Army_descriptor_;
}

const Army& Army::default_instance() {
  protobuf_InitDefaults_protoTest_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Army> Army_default_instance_;

Army* Army::New(::google::protobuf::Arena* arena) const {
  Army* n = new Army;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Army::Clear() {
// @@protoc_insertion_point(message_clear_start:Army)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Army, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Army*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(archers_, cavalry_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Army::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Army)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 archers = 1;
      case 1: {
        if (tag == 8) {
          set_has_archers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &archers_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_swordsman;
        break;
      }

      // required int32 swordsman = 2;
      case 2: {
        if (tag == 16) {
         parse_swordsman:
          set_has_swordsman();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &swordsman_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cavalry;
        break;
      }

      // required int32 cavalry = 3;
      case 3: {
        if (tag == 24) {
         parse_cavalry:
          set_has_cavalry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cavalry_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Army)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Army)
  return false;
#undef DO_
}

void Army::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Army)
  // required int32 archers = 1;
  if (has_archers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->archers(), output);
  }

  // required int32 swordsman = 2;
  if (has_swordsman()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->swordsman(), output);
  }

  // required int32 cavalry = 3;
  if (has_cavalry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cavalry(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Army)
}

::google::protobuf::uint8* Army::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Army)
  // required int32 archers = 1;
  if (has_archers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->archers(), target);
  }

  // required int32 swordsman = 2;
  if (has_swordsman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->swordsman(), target);
  }

  // required int32 cavalry = 3;
  if (has_cavalry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cavalry(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Army)
  return target;
}

size_t Army::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Army)
  size_t total_size = 0;

  if (has_archers()) {
    // required int32 archers = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->archers());
  }

  if (has_swordsman()) {
    // required int32 swordsman = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->swordsman());
  }

  if (has_cavalry()) {
    // required int32 cavalry = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cavalry());
  }

  return total_size;
}
size_t Army::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Army)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 archers = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->archers());

    // required int32 swordsman = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->swordsman());

    // required int32 cavalry = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cavalry());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Army::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Army)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Army* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Army>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Army)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Army)
    UnsafeMergeFrom(*source);
  }
}

void Army::MergeFrom(const Army& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Army)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Army::UnsafeMergeFrom(const Army& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_archers()) {
      set_archers(from.archers());
    }
    if (from.has_swordsman()) {
      set_swordsman(from.swordsman());
    }
    if (from.has_cavalry()) {
      set_cavalry(from.cavalry());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Army::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Army)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Army::CopyFrom(const Army& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Army)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Army::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Army::Swap(Army* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Army::InternalSwap(Army* other) {
  std::swap(archers_, other->archers_);
  std::swap(swordsman_, other->swordsman_);
  std::swap(cavalry_, other->cavalry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Army::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Army_descriptor_;
  metadata.reflection = Army_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Army

// required int32 archers = 1;
bool Army::has_archers() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Army::set_has_archers() {
  _has_bits_[0] |= 0x00000001u;
}
void Army::clear_has_archers() {
  _has_bits_[0] &= ~0x00000001u;
}
void Army::clear_archers() {
  archers_ = 0;
  clear_has_archers();
}
::google::protobuf::int32 Army::archers() const {
  // @@protoc_insertion_point(field_get:Army.archers)
  return archers_;
}
void Army::set_archers(::google::protobuf::int32 value) {
  set_has_archers();
  archers_ = value;
  // @@protoc_insertion_point(field_set:Army.archers)
}

// required int32 swordsman = 2;
bool Army::has_swordsman() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Army::set_has_swordsman() {
  _has_bits_[0] |= 0x00000002u;
}
void Army::clear_has_swordsman() {
  _has_bits_[0] &= ~0x00000002u;
}
void Army::clear_swordsman() {
  swordsman_ = 0;
  clear_has_swordsman();
}
::google::protobuf::int32 Army::swordsman() const {
  // @@protoc_insertion_point(field_get:Army.swordsman)
  return swordsman_;
}
void Army::set_swordsman(::google::protobuf::int32 value) {
  set_has_swordsman();
  swordsman_ = value;
  // @@protoc_insertion_point(field_set:Army.swordsman)
}

// required int32 cavalry = 3;
bool Army::has_cavalry() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Army::set_has_cavalry() {
  _has_bits_[0] |= 0x00000004u;
}
void Army::clear_has_cavalry() {
  _has_bits_[0] &= ~0x00000004u;
}
void Army::clear_cavalry() {
  cavalry_ = 0;
  clear_has_cavalry();
}
::google::protobuf::int32 Army::cavalry() const {
  // @@protoc_insertion_point(field_get:Army.cavalry)
  return cavalry_;
}
void Army::set_cavalry(::google::protobuf::int32 value) {
  set_has_cavalry();
  cavalry_ = value;
  // @@protoc_insertion_point(field_set:Army.cavalry)
}

inline const Army* Army::internal_default_instance() {
  return &Army_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game::kPlayer1FieldNumber;
const int Game::kPlayer2FieldNumber;
const int Game::kArmy1FieldNumber;
const int Game::kArmy2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game::Game()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protoTest_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Game)
}

void Game::InitAsDefaultInstance() {
  player1_ = const_cast< ::Player*>(
      ::Player::internal_default_instance());
  player2_ = const_cast< ::Player*>(
      ::Player::internal_default_instance());
  army1_ = const_cast< ::Army*>(
      ::Army::internal_default_instance());
  army2_ = const_cast< ::Army*>(
      ::Army::internal_default_instance());
}

Game::Game(const Game& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Game)
}

void Game::SharedCtor() {
  _cached_size_ = 0;
  player1_ = NULL;
  player2_ = NULL;
  army1_ = NULL;
  army2_ = NULL;
}

Game::~Game() {
  // @@protoc_insertion_point(destructor:Game)
  SharedDtor();
}

void Game::SharedDtor() {
  if (this != &Game_default_instance_.get()) {
    delete player1_;
    delete player2_;
    delete army1_;
    delete army2_;
  }
}

void Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game_descriptor_;
}

const Game& Game::default_instance() {
  protobuf_InitDefaults_protoTest_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Game> Game_default_instance_;

Game* Game::New(::google::protobuf::Arena* arena) const {
  Game* n = new Game;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game::Clear() {
// @@protoc_insertion_point(message_clear_start:Game)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_player1()) {
      if (player1_ != NULL) player1_->::Player::Clear();
    }
    if (has_player2()) {
      if (player2_ != NULL) player2_->::Player::Clear();
    }
    if (has_army1()) {
      if (army1_ != NULL) army1_->::Army::Clear();
    }
    if (has_army2()) {
      if (army2_ != NULL) army2_->::Army::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Player player1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player2;
        break;
      }

      // required .Player player2 = 2;
      case 2: {
        if (tag == 18) {
         parse_player2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_army1;
        break;
      }

      // required .Army army1 = 3;
      case 3: {
        if (tag == 26) {
         parse_army1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_army1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_army2;
        break;
      }

      // required .Army army2 = 4;
      case 4: {
        if (tag == 34) {
         parse_army2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_army2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Game)
  return false;
#undef DO_
}

void Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Game)
  // required .Player player1 = 1;
  if (has_player1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player1_, output);
  }

  // required .Player player2 = 2;
  if (has_player2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player2_, output);
  }

  // required .Army army1 = 3;
  if (has_army1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->army1_, output);
  }

  // required .Army army2 = 4;
  if (has_army2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->army2_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Game)
}

::google::protobuf::uint8* Game::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Game)
  // required .Player player1 = 1;
  if (has_player1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player1_, false, target);
  }

  // required .Player player2 = 2;
  if (has_player2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->player2_, false, target);
  }

  // required .Army army1 = 3;
  if (has_army1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->army1_, false, target);
  }

  // required .Army army2 = 4;
  if (has_army2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->army2_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Game)
  return target;
}

size_t Game::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Game)
  size_t total_size = 0;

  if (has_player1()) {
    // required .Player player1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player1_);
  }

  if (has_player2()) {
    // required .Player player2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player2_);
  }

  if (has_army1()) {
    // required .Army army1 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->army1_);
  }

  if (has_army2()) {
    // required .Army army2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->army2_);
  }

  return total_size;
}
size_t Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Game)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .Player player1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player1_);

    // required .Player player2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player2_);

    // required .Army army1 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->army1_);

    // required .Army army2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->army2_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Game)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Game* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Game)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Game)
    UnsafeMergeFrom(*source);
  }
}

void Game::MergeFrom(const Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Game)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Game::UnsafeMergeFrom(const Game& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player1()) {
      mutable_player1()->::Player::MergeFrom(from.player1());
    }
    if (from.has_player2()) {
      mutable_player2()->::Player::MergeFrom(from.player2());
    }
    if (from.has_army1()) {
      mutable_army1()->::Army::MergeFrom(from.army1());
    }
    if (from.has_army2()) {
      mutable_army2()->::Army::MergeFrom(from.army2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Game::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game::CopyFrom(const Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Game)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Game::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_player1()) {
    if (!this->player1_->IsInitialized()) return false;
  }
  if (has_player2()) {
    if (!this->player2_->IsInitialized()) return false;
  }
  if (has_army1()) {
    if (!this->army1_->IsInitialized()) return false;
  }
  if (has_army2()) {
    if (!this->army2_->IsInitialized()) return false;
  }
  return true;
}

void Game::Swap(Game* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game::InternalSwap(Game* other) {
  std::swap(player1_, other->player1_);
  std::swap(player2_, other->player2_);
  std::swap(army1_, other->army1_);
  std::swap(army2_, other->army2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game_descriptor_;
  metadata.reflection = Game_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game

// required .Player player1 = 1;
bool Game::has_player1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Game::set_has_player1() {
  _has_bits_[0] |= 0x00000001u;
}
void Game::clear_has_player1() {
  _has_bits_[0] &= ~0x00000001u;
}
void Game::clear_player1() {
  if (player1_ != NULL) player1_->::Player::Clear();
  clear_has_player1();
}
const ::Player& Game::player1() const {
  // @@protoc_insertion_point(field_get:Game.player1)
  return player1_ != NULL ? *player1_
                         : *::Player::internal_default_instance();
}
::Player* Game::mutable_player1() {
  set_has_player1();
  if (player1_ == NULL) {
    player1_ = new ::Player;
  }
  // @@protoc_insertion_point(field_mutable:Game.player1)
  return player1_;
}
::Player* Game::release_player1() {
  // @@protoc_insertion_point(field_release:Game.player1)
  clear_has_player1();
  ::Player* temp = player1_;
  player1_ = NULL;
  return temp;
}
void Game::set_allocated_player1(::Player* player1) {
  delete player1_;
  player1_ = player1;
  if (player1) {
    set_has_player1();
  } else {
    clear_has_player1();
  }
  // @@protoc_insertion_point(field_set_allocated:Game.player1)
}

// required .Player player2 = 2;
bool Game::has_player2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Game::set_has_player2() {
  _has_bits_[0] |= 0x00000002u;
}
void Game::clear_has_player2() {
  _has_bits_[0] &= ~0x00000002u;
}
void Game::clear_player2() {
  if (player2_ != NULL) player2_->::Player::Clear();
  clear_has_player2();
}
const ::Player& Game::player2() const {
  // @@protoc_insertion_point(field_get:Game.player2)
  return player2_ != NULL ? *player2_
                         : *::Player::internal_default_instance();
}
::Player* Game::mutable_player2() {
  set_has_player2();
  if (player2_ == NULL) {
    player2_ = new ::Player;
  }
  // @@protoc_insertion_point(field_mutable:Game.player2)
  return player2_;
}
::Player* Game::release_player2() {
  // @@protoc_insertion_point(field_release:Game.player2)
  clear_has_player2();
  ::Player* temp = player2_;
  player2_ = NULL;
  return temp;
}
void Game::set_allocated_player2(::Player* player2) {
  delete player2_;
  player2_ = player2;
  if (player2) {
    set_has_player2();
  } else {
    clear_has_player2();
  }
  // @@protoc_insertion_point(field_set_allocated:Game.player2)
}

// required .Army army1 = 3;
bool Game::has_army1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Game::set_has_army1() {
  _has_bits_[0] |= 0x00000004u;
}
void Game::clear_has_army1() {
  _has_bits_[0] &= ~0x00000004u;
}
void Game::clear_army1() {
  if (army1_ != NULL) army1_->::Army::Clear();
  clear_has_army1();
}
const ::Army& Game::army1() const {
  // @@protoc_insertion_point(field_get:Game.army1)
  return army1_ != NULL ? *army1_
                         : *::Army::internal_default_instance();
}
::Army* Game::mutable_army1() {
  set_has_army1();
  if (army1_ == NULL) {
    army1_ = new ::Army;
  }
  // @@protoc_insertion_point(field_mutable:Game.army1)
  return army1_;
}
::Army* Game::release_army1() {
  // @@protoc_insertion_point(field_release:Game.army1)
  clear_has_army1();
  ::Army* temp = army1_;
  army1_ = NULL;
  return temp;
}
void Game::set_allocated_army1(::Army* army1) {
  delete army1_;
  army1_ = army1;
  if (army1) {
    set_has_army1();
  } else {
    clear_has_army1();
  }
  // @@protoc_insertion_point(field_set_allocated:Game.army1)
}

// required .Army army2 = 4;
bool Game::has_army2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Game::set_has_army2() {
  _has_bits_[0] |= 0x00000008u;
}
void Game::clear_has_army2() {
  _has_bits_[0] &= ~0x00000008u;
}
void Game::clear_army2() {
  if (army2_ != NULL) army2_->::Army::Clear();
  clear_has_army2();
}
const ::Army& Game::army2() const {
  // @@protoc_insertion_point(field_get:Game.army2)
  return army2_ != NULL ? *army2_
                         : *::Army::internal_default_instance();
}
::Army* Game::mutable_army2() {
  set_has_army2();
  if (army2_ == NULL) {
    army2_ = new ::Army;
  }
  // @@protoc_insertion_point(field_mutable:Game.army2)
  return army2_;
}
::Army* Game::release_army2() {
  // @@protoc_insertion_point(field_release:Game.army2)
  clear_has_army2();
  ::Army* temp = army2_;
  army2_ = NULL;
  return temp;
}
void Game::set_allocated_army2(::Army* army2) {
  delete army2_;
  army2_ = army2;
  if (army2) {
    set_has_army2();
  } else {
    clear_has_army2();
  }
  // @@protoc_insertion_point(field_set_allocated:Game.army2)
}

inline const Game* Game::internal_default_instance() {
  return &Game_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
